/*
 * This file is generated by jOOQ.
 */
package com.odyssey.booktube.database.jooq.model.book_tube.tables.records;


import com.odyssey.booktube.database.jooq.model.book_tube.tables.Author;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record4<Long, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>book_tube.Author.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>book_tube.Author.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>book_tube.Author.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>book_tube.Author.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>book_tube.Author.location</code>.
     */
    public void setLocation(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>book_tube.Author.location</code>.
     */
    public String getLocation() {
        return (String) get(2);
    }

    /**
     * Setter for <code>book_tube.Author.favoriteBookId</code>.
     */
    public void setFavoritebookid(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>book_tube.Author.favoriteBookId</code>.
     */
    public Long getFavoritebookid() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Author.AUTHOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Author.AUTHOR.NAME;
    }

    @Override
    public Field<String> field3() {
        return Author.AUTHOR.LOCATION;
    }

    @Override
    public Field<Long> field4() {
        return Author.AUTHOR.FAVORITEBOOKID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getLocation();
    }

    @Override
    public Long component4() {
        return getFavoritebookid();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getLocation();
    }

    @Override
    public Long value4() {
        return getFavoritebookid();
    }

    @Override
    public AuthorRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuthorRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AuthorRecord value3(String value) {
        setLocation(value);
        return this;
    }

    @Override
    public AuthorRecord value4(Long value) {
        setFavoritebookid(value);
        return this;
    }

    @Override
    public AuthorRecord values(Long value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Long id, String name, String location, Long favoritebookid) {
        super(Author.AUTHOR);

        setId(id);
        setName(name);
        setLocation(location);
        setFavoritebookid(favoritebookid);
    }
}
