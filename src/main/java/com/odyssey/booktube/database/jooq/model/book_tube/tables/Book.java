/*
 * This file is generated by jOOQ.
 */
package com.odyssey.booktube.database.jooq.model.book_tube.tables;


import com.odyssey.booktube.database.jooq.model.book_tube.BookTube;
import com.odyssey.booktube.database.jooq.model.book_tube.Keys;
import com.odyssey.booktube.database.jooq.model.book_tube.tables.records.BookRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book_tube.Book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>book_tube.Book.id</code>.
     */
    public final TableField<BookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>book_tube.Book.title</code>.
     */
    public final TableField<BookRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>book_tube.Book.authorId</code>.
     */
    public final TableField<BookRecord, Long> AUTHORID = createField(DSL.name("authorId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>book_tube.Book.numberOfPages</code>.
     */
    public final TableField<BookRecord, Integer> NUMBEROFPAGES = createField(DSL.name("numberOfPages"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>book_tube.Book.price</code>.
     */
    public final TableField<BookRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL(13, 4).nullable(false), this, "");

    /**
     * The column <code>book_tube.Book.numberOfReaders</code>.
     */
    public final TableField<BookRecord, Integer> NUMBEROFREADERS = createField(DSL.name("numberOfReaders"), SQLDataType.INTEGER, this, "");

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>book_tube.Book</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>book_tube.Book</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>book_tube.Book</code> table reference
     */
    public Book() {
        this(DSL.name("Book"), null);
    }

    public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, BOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BookTube.BOOK_TUBE;
    }

    @Override
    public Identity<BookRecord, Long> getIdentity() {
        return (Identity<BookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    @Override
    public List<ForeignKey<BookRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_BOOKAUTHORID_AUTHORID);
    }

    private transient Author _author;

    public Author author() {
        if (_author == null)
            _author = new Author(this, Keys.FK_BOOKAUTHORID_AUTHORID);

        return _author;
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, Integer, BigDecimal, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
